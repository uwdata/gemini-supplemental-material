c(stimuliName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimuliName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimuliName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimuliName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
}
bootstrapped_cis = data.frame(stimuliName = character(), designName=character(), lo=numeric(), hi=numeric())
for (stimulusName in c('Stimuli 1', 'Stimuli 2', 'Stimuli 3', 'Stimuli 4')) {
sub_df = newdf[newdf$stimuliName==stimulusName,]
# bootstrapping with 1000 replications
result_s1r1 <- boot(data=sub_df[sub_df$designName=='stage1-rank1','rank'], statistic=bs, R=1000)
result_s2r1 <- boot(data=sub_df[sub_df$designName=='stage2-rank1','rank'], statistic=bs, R=1000)
result_s2r2 <- boot(data=sub_df[sub_df$designName=='stage2-rank2','rank'], statistic=bs, R=1000)
result_s2r3 <- boot(data=sub_df[sub_df$designName=='stage2-rank3','rank'], statistic=bs, R=1000)
result_s3r1 <- boot(data=sub_df[sub_df$designName=='stage3-rank1','rank'], statistic=bs, R=1000)
boot_ci_s1r1 = boot.ci(result_s1r1, type="bca")$bca[4:5]
boot_ci_s2r1 = boot.ci(result_s2r1, type="bca")$bca[4:5]
boot_ci_s2r2 = boot.ci(result_s2r2, type="bca")$bca[4:5]
boot_ci_s2r3 = boot.ci(result_s2r3, type="bca")$bca[4:5]
boot_ci_s3r1 = boot.ci(result_s3r1, type="bca")$bca[4:5]
# get 95% confidence intervals
x = rbind(bootstrapped_cis,
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
}
bootstrapped_cis
bootstrapped_cis = data.frame(stimuliName = character(), designName=character(), lo=numeric(), hi=numeric())
for (stimulusName in c('Stimuli 1', 'Stimuli 2', 'Stimuli 3', 'Stimuli 4')) {
sub_df = newdf[newdf$stimuliName==stimulusName,]
# bootstrapping with 1000 replications
result_s1r1 <- boot(data=sub_df[sub_df$designName=='stage1-rank1','rank'], statistic=bs, R=1000)
result_s2r1 <- boot(data=sub_df[sub_df$designName=='stage2-rank1','rank'], statistic=bs, R=1000)
result_s2r2 <- boot(data=sub_df[sub_df$designName=='stage2-rank2','rank'], statistic=bs, R=1000)
result_s2r3 <- boot(data=sub_df[sub_df$designName=='stage2-rank3','rank'], statistic=bs, R=1000)
result_s3r1 <- boot(data=sub_df[sub_df$designName=='stage3-rank1','rank'], statistic=bs, R=1000)
boot_ci_s1r1 = boot.ci(result_s1r1, type="bca")$bca[4:5]
boot_ci_s2r1 = boot.ci(result_s2r1, type="bca")$bca[4:5]
boot_ci_s2r2 = boot.ci(result_s2r2, type="bca")$bca[4:5]
boot_ci_s2r3 = boot.ci(result_s2r3, type="bca")$bca[4:5]
boot_ci_s3r1 = boot.ci(result_s3r1, type="bca")$bca[4:5]
# get 95% confidence intervals
bootstrapped_cis = rbind(bootstrapped_cis,
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
}
bootstrapped_cis
bootstrapped_cis = data.frame(stimuliName = character(), designName=character(), lo=numeric(), hi=numeric())
bootstrapped_cis
bootstrapped_cis <- rbind(bootstrapped_cis,
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
bootstrapped_cis
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2])
rbind(
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
data.frame(
rbind(
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
)
bootstrapped_cis = data.frame(stimuliName = character(), designName=character(), lo=numeric(), hi=numeric())
for (stimulusName in c('Stimuli 1', 'Stimuli 2', 'Stimuli 3', 'Stimuli 4')) {
sub_df = newdf[newdf$stimuliName==stimulusName,]
# bootstrapping with 1000 replications
result_s1r1 <- boot(data=sub_df[sub_df$designName=='stage1-rank1','rank'], statistic=bs, R=1000)
result_s2r1 <- boot(data=sub_df[sub_df$designName=='stage2-rank1','rank'], statistic=bs, R=1000)
result_s2r2 <- boot(data=sub_df[sub_df$designName=='stage2-rank2','rank'], statistic=bs, R=1000)
result_s2r3 <- boot(data=sub_df[sub_df$designName=='stage2-rank3','rank'], statistic=bs, R=1000)
result_s3r1 <- boot(data=sub_df[sub_df$designName=='stage3-rank1','rank'], statistic=bs, R=1000)
boot_ci_s1r1 = boot.ci(result_s1r1, type="bca")$bca[4:5]
boot_ci_s2r1 = boot.ci(result_s2r1, type="bca")$bca[4:5]
boot_ci_s2r2 = boot.ci(result_s2r2, type="bca")$bca[4:5]
boot_ci_s2r3 = boot.ci(result_s2r3, type="bca")$bca[4:5]
boot_ci_s3r1 = boot.ci(result_s3r1, type="bca")$bca[4:5]
# get 95% confidence intervals
bootstrapped_cis <- rbind(bootstrapped_cis,
data.frame(
rbind(
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
)
)
}
bootstrapped_cis
names(bootstrapped_cis) <- c("stimuliName", "designName", "lo", "hi")
bootstrapped_cis
bootstrapped_cis.to_json("test.json")
toJSON(bootstrapped_cis)
bootstrapped_cis = data.frame(stimuliName = character(), designName=character(), lo=numeric(), hi=numeric())
for (stimulusName in c('Stimuli 1', 'Stimuli 2', 'Stimuli 3', 'Stimuli 4')) {
sub_df = newdf[newdf$stimuliName==stimulusName,]
# bootstrapping with 1000 replications
result_s1r1 <- boot(data=sub_df[sub_df$designName=='stage1-rank1','rank'], statistic=bs, R=1000)
result_s2r1 <- boot(data=sub_df[sub_df$designName=='stage2-rank1','rank'], statistic=bs, R=1000)
result_s2r2 <- boot(data=sub_df[sub_df$designName=='stage2-rank2','rank'], statistic=bs, R=1000)
result_s2r3 <- boot(data=sub_df[sub_df$designName=='stage2-rank3','rank'], statistic=bs, R=1000)
result_s3r1 <- boot(data=sub_df[sub_df$designName=='stage3-rank1','rank'], statistic=bs, R=1000)
boot_ci_s1r1 = boot.ci(result_s1r1, type="bca")$bca[4:5]
boot_ci_s2r1 = boot.ci(result_s2r1, type="bca")$bca[4:5]
boot_ci_s2r2 = boot.ci(result_s2r2, type="bca")$bca[4:5]
boot_ci_s2r3 = boot.ci(result_s2r3, type="bca")$bca[4:5]
boot_ci_s3r1 = boot.ci(result_s3r1, type="bca")$bca[4:5]
# get 95% confidence intervals
bootstrapped_cis <- rbind(bootstrapped_cis,
data.frame(
rbind(
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r3[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
)
)
}
names(bootstrapped_cis) <- c("stimuliName", "designName", "lo", "hi")
toJSON(bootstrapped_cis)
library(jsonlite)
setwd("~/Desktop/dev/gemini-exp/responses/processed/analysis/final")
df <- fromJSON("./data-final.json", flatten=TRUE)
df[, 'gender'] <- as.factor((df[, 'gender']))
mean(df$compTime)
#Exclude the responses that took more than an hour (avg = 330048.3 ms)
df = df[df$compTime <= 60*60*1000,];
print('# of Participants: ')
length(unique(df$userKey))
unique(df$vision_impairment)
df = df[!df$excluded,];
print('# of Participants: ')
length(unique(df$userKey))
unique(df$vision_impairment)
summary(df)
newdf = df[,c("stimuliName", "designName", "stimuliOrder", "designOrder", "rank", "userKey", "designCost")]
newdf[, 'rank'] <- as.numeric((df[, 'rank']))
newdf[, 'stimuliName'] <- as.factor((df[, 'stimuliName']))
newdf[, 'designName'] <- as.factor((df[, 'designName']))
newdf[, 'stimuliOrder'] <- as.numeric((df[, 'stimuliOrder']))
newdf[, 'designOrder'] <- as.numeric((df[, 'designOrder']))
newdf[, 'userKey'] <- as.factor((df[, 'userKey']))
newdf[, 'designCost'] <- as.numeric((df[, 'designCost']))
summary(newdf)
print('# of Participants: ')
length(unique(df$userKey))
newdf = df[,c("stimuliName", "designName", "stimuliOrder", "designOrder", "rank", "userKey", "designCost")]
newdf[, 'rank'] <- as.numeric((df[, 'rank']))
newdf[, 'stimuliName'] <- as.factor((df[, 'stimuliName']))
newdf[, 'designName'] <- as.factor((df[, 'designName']))
newdf[, 'stimuliOrder'] <- as.numeric((df[, 'stimuliOrder']))
newdf[, 'designOrder'] <- as.numeric((df[, 'designOrder']))
newdf[, 'userKey'] <- as.factor((df[, 'userKey']))
newdf[, 'designCost'] <- as.numeric((df[, 'designCost']))
summary(newdf)
#### Overall
s2R1 = newdf[newdf$designName=='stage2-rank1',]$rank
s2R2 = newdf[newdf$designName=='stage2-rank2',]$rank
s2R3 = newdf[newdf$designName=='stage2-rank3',]$rank
s1R1 = newdf[newdf$designName=='stage1-rank1',]$rank
s3R1 = newdf[newdf$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
t <- friedman.test(data)
x <- colMeans(data)
print(x[order(x)])
N = nrow(newdf)
Value <- newdf$rank
Group <- factor(newdf$designName)
p <- pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
df_stim1 = newdf[newdf$stimuliName=='Stimuli 1',]
s2R1 = df_stim1[df_stim1$designName=='stage2-rank1',]$rank
s2R2 = df_stim1[df_stim1$designName=='stage2-rank2',]$rank
s2R3 = df_stim1[df_stim1$designName=='stage2-rank3',]$rank
s1R1 = df_stim1[df_stim1$designName=='stage1-rank1',]$rank
s3R1 = df_stim1[df_stim1$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim1)
Value <- df_stim1$rank
Group <- factor(df_stim1$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#### Stimulus: Sorting & Updating Bars
df_stim2 = newdf[newdf$stimuliName=='Stimuli 2',]
s2R1 = df_stim2[df_stim2$designName=='stage2-rank1',]$rank
s2R2 = df_stim2[df_stim2$designName=='stage2-rank2',]$rank
s2R3 = df_stim2[df_stim2$designName=='stage2-rank3',]$rank
s1R1 = df_stim2[df_stim2$designName=='stage1-rank1',]$rank
s3R1 = df_stim2[df_stim2$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim2)
Value <- df_stim2$rank
Group <- factor(df_stim2$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#### Stimulus: Expanding Lines
df_stim3 = newdf[newdf$stimuliName=='Stimuli 3',]
s2R1 = df_stim3[df_stim3$designName=='stage2-rank1',]$rank
s2R2 = df_stim3[df_stim3$designName=='stage2-rank2',]$rank
s2R3 = df_stim3[df_stim3$designName=='stage2-rank3',]$rank
s1R1 = df_stim3[df_stim3$designName=='stage1-rank1',]$rank
s3R1 = df_stim3[df_stim3$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim3)
Value <- df_stim3$rank
Group <- factor(df_stim3$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#s1R1     s2R1     s2R3     s3R1     s2R2
#1.788462 2.653846 3.442308 3.538462 3.576923
# stage1-rank1 > *
# stage2-rank1 > stage2-rank2, stage3-rank1
df_stim4 = newdf[newdf$stimuliName=='Stimuli 4',]
s2R1 = df_stim4[df_stim4$designName=='stage2-rank1',]$rank
s2R2 = df_stim4[df_stim4$designName=='stage2-rank2',]$rank
s2R3 = df_stim4[df_stim4$designName=='stage2-rank3',]$rank
s1R1 = df_stim4[df_stim4$designName=='stage1-rank1',]$rank
s3R1 = df_stim4[df_stim4$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim4)
Value <- df_stim4$rank
Group <- factor(df_stim4$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
# s1R1     s2R1     s2R2     s3R1     s2R3
# 2.339623 2.905660 3.018868 3.094340 3.641509
# stage1-rank1 > stage2-rank3
setwd("~/Documents/Research/Projects/Gemini/paper-vis2020/supplement_material/formative_study/analysis")
library(jsonlite)
df <- fromJSON("./data-final.json", flatten=TRUE)
df[, 'gender'] <- as.factor((df[, 'gender']))
#Exclude the participants who self-reported color deficiency
#df = df[df$vision_impairment=='no',];
# So far, there is no participants having vision impairment.
#Exclude the responses that took more than an hour (avg = 330048.3 ms)
df = df[df$compTime <= 60*60*1000,];
df = df[!df$excluded,];
print('# of Participants: ')
length(unique(df$userKey))
newdf = df[,c("stimulusName", "designName", "stimulusOrder", "designOrder", "rank", "userKey", "designCost")]
library(jsonlite)
df <- fromJSON("./data-final.json", flatten=TRUE)
df[, 'gender'] <- as.factor((df[, 'gender']))
#Exclude the participants who self-reported color deficiency
#df = df[df$vision_impairment=='no',];
# So far, there is no participants having vision impairment.
#Exclude the responses that took more than an hour (avg = 330048.3 ms)
df = df[df$compTime <= 60*60*1000,];
df = df[!df$excluded,];
print('# of Participants: ')
length(unique(df$userKey))
newdf = df[,c("stimulusName", "designName", "stimulusOrder", "designOrder", "rank", "userKey", "designCost")]
newdf[, 'rank'] <- as.numeric((df[, 'rank']))
newdf[, 'stimulusName'] <- as.factor((df[, 'stimulusName']))
newdf[, 'designName'] <- as.factor((df[, 'designName']))
newdf[, 'stimulusOrder'] <- as.numeric((df[, 'stimulusOrder']))
newdf[, 'designOrder'] <- as.numeric((df[, 'designOrder']))
newdf[, 'userKey'] <- as.factor((df[, 'userKey']))
newdf[, 'designCost'] <- as.numeric((df[, 'designCost']))
summary(newdf)
#### Overall
s2R1 = newdf[newdf$designName=='stage2-rank1',]$rank
s2R2 = newdf[newdf$designName=='stage2-rank2',]$rank
s2R3 = newdf[newdf$designName=='stage2-rank3',]$rank
s1R1 = newdf[newdf$designName=='stage1-rank1',]$rank
s3R1 = newdf[newdf$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
t <- friedman.test(data)
x <- colMeans(data)
print(x[order(x)])
N = nrow(newdf)
Value <- newdf$rank
Group <- factor(newdf$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#s1R1     s2R1     s2R2     s3R1     s2R3
#2.137441 2.672986 3.236967 3.398104 3.554502
# stage1-rank1 > *
# stage2-rank1 > * (except stage1-rank1)
#### Stimulus: Filtering Points
df_stim1 = newdf[newdf$stimulusName=='Stimulus 1',]
s2R1 = df_stim1[df_stim1$designName=='stage2-rank1',]$rank
s2R2 = df_stim1[df_stim1$designName=='stage2-rank2',]$rank
s2R3 = df_stim1[df_stim1$designName=='stage2-rank3',]$rank
s1R1 = df_stim1[df_stim1$designName=='stage1-rank1',]$rank
s3R1 = df_stim1[df_stim1$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim1)
Value <- df_stim1$rank
Group <- factor(df_stim1$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#s2R1     s1R1     s3R1     s2R2     s2R3
#2.207547 2.396226 3.377358 3.490566 3.528302
#stage1-rank1 > stage3-rank1, stage2-rank2, stage2-rank3
#stage2-rank1 > stage3-rank1, stage2-rank2, stage2-rank3
#### Stimulus: Expanding Lines
df_stim3 = newdf[newdf$stimulusName=='Stimulus 2',]
s2R1 = df_stim3[df_stim3$designName=='stage2-rank1',]$rank
s2R2 = df_stim3[df_stim3$designName=='stage2-rank2',]$rank
s2R3 = df_stim3[df_stim3$designName=='stage2-rank3',]$rank
s1R1 = df_stim3[df_stim3$designName=='stage1-rank1',]$rank
s3R1 = df_stim3[df_stim3$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim3)
Value <- df_stim3$rank
Group <- factor(df_stim3$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#s1R1     s2R1     s2R3     s3R1     s2R2
#1.788462 2.653846 3.442308 3.538462 3.576923
# stage1-rank1 > *
# stage2-rank1 > stage2-rank2, stage3-rank1
#### Stimulus: Sorting & Updating Bars
df_stim2 = newdf[newdf$stimulusName=='Stimulus 3',]
s2R1 = df_stim2[df_stim2$designName=='stage2-rank1',]$rank
s2R2 = df_stim2[df_stim2$designName=='stage2-rank2',]$rank
s2R3 = df_stim2[df_stim2$designName=='stage2-rank3',]$rank
s1R1 = df_stim2[df_stim2$designName=='stage1-rank1',]$rank
s3R1 = df_stim2[df_stim2$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim2)
Value <- df_stim2$rank
Group <- factor(df_stim2$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
#s1R1     s2R2     s2R1     s3R1     s2R3
#2.018868 2.867925 2.924528 3.584906 3.603774
#s1R1 > *
#### Stimulus: Aggregating
df_stim4 = newdf[newdf$stimulusName=='Stimulus 4',]
s2R1 = df_stim4[df_stim4$designName=='stage2-rank1',]$rank
s2R2 = df_stim4[df_stim4$designName=='stage2-rank2',]$rank
s2R3 = df_stim4[df_stim4$designName=='stage2-rank3',]$rank
s1R1 = df_stim4[df_stim4$designName=='stage1-rank1',]$rank
s3R1 = df_stim4[df_stim4$designName=='stage3-rank1',]$rank
data = cbind(s2R1, s2R2, s2R3, s1R1, s3R1)
x <- colMeans(data)
print(x[order(x)])
friedman.test(data)
N = nrow(df_stim4)
Value <- df_stim4$rank
Group <- factor(df_stim4$designName)
pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
# s1R1     s2R1     s2R2     s3R1     s2R3
# 2.339623 2.905660 3.018868 3.094340 3.641509
# stage1-rank1 > stage2-rank3
############################################################################################
# Bootstrap 95% CIs
library(boot)
bs <- function(data, indices) {
return(mean(data[indices]))
}
bootstrapped_cis = data.frame(stimulusName = character(), designName=character(), lo=numeric(), hi=numeric())
for (stimulusName in c('Stimulus 1', 'Stimulus 2', 'Stimulus 3', 'Stimulus 4')) {
sub_df = newdf[newdf$stimulusName==stimulusName,]
result_s1r1 <- boot(data=sub_df[sub_df$designName=='stage1-rank1','rank'], statistic=bs, R=1000)
result_s2r1 <- boot(data=sub_df[sub_df$designName=='stage2-rank1','rank'], statistic=bs, R=1000)
result_s2r2 <- boot(data=sub_df[sub_df$designName=='stage2-rank2','rank'], statistic=bs, R=1000)
result_s2r3 <- boot(data=sub_df[sub_df$designName=='stage2-rank3','rank'], statistic=bs, R=1000)
result_s3r1 <- boot(data=sub_df[sub_df$designName=='stage3-rank1','rank'], statistic=bs, R=1000)
boot_ci_s1r1 = boot.ci(result_s1r1, type="bca")$bca[4:5]
boot_ci_s2r1 = boot.ci(result_s2r1, type="bca")$bca[4:5]
boot_ci_s2r2 = boot.ci(result_s2r2, type="bca")$bca[4:5]
boot_ci_s2r3 = boot.ci(result_s2r3, type="bca")$bca[4:5]
boot_ci_s3r1 = boot.ci(result_s3r1, type="bca")$bca[4:5]
bootstrapped_cis <- rbind(bootstrapped_cis,
data.frame(
rbind(
c(stimulusName, 'stage1-rank1', boot_ci_s1r1[1], boot_ci_s1r1[2]),
c(stimulusName, 'stage2-rank1', boot_ci_s2r1[1], boot_ci_s2r1[2]),
c(stimulusName, 'stage2-rank2', boot_ci_s2r2[1], boot_ci_s2r2[2]),
c(stimulusName, 'stage2-rank3', boot_ci_s2r3[1], boot_ci_s2r3[2]),
c(stimulusName, 'stage3-rank1', boot_ci_s3r1[1], boot_ci_s3r1[2])
)
)
)
}
names(bootstrapped_cis) <- c("stimulusName", "designName", "lo", "hi")
toJSON(bootstrapped_cis)
df <- fromJSON("../data-pilot.json", flatten=TRUE) #Pilot Data
#Exclude the participants who self-reported color deficiency
#df = df[df$vision_deficiency=='no',];
#Exclude the 4 who responsed inappropriate text as their rationales (e.g., random text, ...)
df = df[df$userKey != 'WtDRM2RiuXcZcuS2Dhypf0OwGq13',];
df = df[df$userKey != 'aAMc8mmmzzgqxyHWxDUFDHUtHT02',];
df = df[df$userKey != '9mU8fcUNGxeRbjiuvgWDhGXPApA3',];
df = df[df$userKey != 'nLm0CjOZj4V2beGj4V464KsM6K83',];
df = df[df$userKey != '1R8bRFWzuIhNiRandt7SpXabpDp2',];
df = df[df$userKey != 'VdD0a9nNQZgnQGriLXNaXgi0WMC2',];
df = df[df$userKey != 'EOMSL7mV9NgaDpYo3dzRwo5jiGC2',];
#Exclude 2 responses that took more than an hour.
df = df[df$compTime <= 15*60*1000,];
s1 = df[df$designName=='stage1-rank1',]$rank
s2r1 = df[df$designName=='stage2-rank1',]$rank
s2r2 = df[df$designName=='stage2-rank2',]$rank
s2r3 = df[df$designName=='stage2-rank3',]$rank
s3 = df[df$designName=='stage3-rank1',]$rank
df = cbind(s2r1, s2r2, s2r3, s1, s3)
set.seed(123)  # to make the results reproducible
possible.ns <- seq(from=50, to=100, by=10)     # The sample sizes we'll be considering
alpha <- 0.05                                    # Standard significance level
sims <- 1000                               # Number of simulations to conduct for each N
#compute power for each test assuming observed staged animations' sd and non staged animations' sd, and mean for staged animations which is effect_size more than mean of average non-staged animations
# effect_size = 2.0
#calculate sds and mean
means <- colMeans(df)
sds <- (apply(df, 2, sd))
# s2r1Mean <- means['s2r3'] - effect_size
#will find power for seeing at least a significant friendman test, and at least n significant posthoc comparison, at lesat two significant post hoc comparisons, etc
#only posthoc comparisons we care about are the ones that compare staged animations to others
pairN = 10
results <- data.frame(condition= c("result"))
results.posthoc <- vector(length=pairN);
for (i in 1:pairN){
results.posthoc[[i]] <- data.frame(condition= c("result"))
}
# first create the dataframe with NA in all the cells
for (k in 1:length(possible.ns)){
results[, as.character(possible.ns[k])] = rep(NA, 1)
for (i in 1:pairN){
results.posthoc[[i]][, as.character(possible.ns[k])] = rep(NA, 1)
}
}
significant.experiments.posthoc <- vector(length=pairN);
for (i in 1:pairN){
significant.experiments.posthoc[[i]] <- data.frame(condition= c("result"))
}
for (j in 1:length(possible.ns)){
N <- possible.ns[j]                              # Pick the jth value for N
print (N)
significant.experiments <- rep(NA, sims)
for (i in 1:pairN){
significant.experiments.posthoc[[i]] <- rep(NA, sims)
}
for (i in 1:sims){ #for each simulation of that N
s1 <- round(rnorm(N, means['s1'], sds['s1'])) #simulate ranking for s1 transitions
# s2r1 <- round(rnorm(N, s2r1Mean, sds['s2r1'])) #simulate ranking for s2r1 transitions
s2r1 <- round(rnorm(N, means['s2r1'], sds['s2r1'])) #simulate ranking for s2r1 transitions
s2r2 <- round(rnorm(N, means['s2r2'], sds['s2r2'])) #simulate ranking for s2r2 transitions
s2r3 <- round(rnorm(N, means['s2r3'], sds['s2r3'])) #simulate ranking for s2r3 transitions
s3 <- round(rnorm(N, means['s3'], sds['s3'])) #simulate ranking for s2r3 transitions
s1 <- ifelse(s1 > 5, 5, s1) #make sure they aren't below 1 or over 6
s1 <- ifelse(s1 < 1, 1, s1) #make sure they aren't below 1 or over 6
s2r1 <- ifelse(s2r1 < 1, 1, s2r1)
s2r1 <- ifelse(s2r1 > 5, 5, s2r1)
s2r2 <- ifelse(s2r2 < 1, 1, s2r2)
s2r2 <- ifelse(s2r2 > 5, 5, s2r2)
s2r3 <- ifelse(s2r3 < 1, 1, s2r3)
s2r3 <- ifelse(s2r3 > 5, 5, s2r3)
s3 <- ifelse(s3 < 1, 1, s3)
s3 <- ifelse(s3 > 5, 5, s3)
#put the data together
fake_ranking <- cbind(s1, s2r1, s2r2, s2r3, s3)
significant.experiments[i] <- (friedman.test(fake_ranking)$p.value <= alpha)
Value <- c(s1, s2r1, s2r2, s2r3, s3)
Group <- factor(c(rep("rank.s1",N),rep("rank.s2r1",N),rep("rank.s2r2",N),rep("rank.s2r3",N),rep("rank.s3",N)))
p <- pairwise.wilcox.test(Value, Group, p.adj="bonferroni", exact=F, paired=T)
count = sum(c(p$p.value) <= alpha, na.rm=TRUE)
for (k in 1:pairN){
if(count > k-1) {
significant.experiments.posthoc[[k]][i] = TRUE
}else{
significant.experiments.posthoc[[k]][i] = FALSE
}
}
}
results[1,as.character(N)] <- mean(significant.experiments)
for (k in 1:pairN){
results.posthoc[[k]][1,as.character(N)] <- mean(significant.experiments.posthoc[[k]])
}
}
print("Probability of detecting significant friedman test")
print(results)
print("Probability of detecting significant friedman test and k posthoc differences between staged animations and the others.")
print(results.posthoc)
